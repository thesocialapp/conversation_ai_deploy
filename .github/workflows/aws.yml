name: Deploy to production

on:
  push:
    branches: [ "master" ]

# Read environment secrets from AWS Secrets Manager
# https://docs.github.com/en/actions/reference/encrypted-secrets#using-encrypted-secrets-in-a-workflow
env:
    AWS_REGION: "us-east-2"

permissions:
    id-token: write # Required for requesting JWT
    contents: read # Required for checking out the repository

jobs:
    deploy:
        name: Build image
        environment: cai_aws
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            
            - name: Install Kubectl
              uses: azure/setup-kubectl@v3
              with:
                version: 'latest'
              id: install
            
            - name: Configure aws crendentials
              uses: aws-actions/configure-aws-credentials@v1.7.0
              with:
                role-to-assume: ${{ secrets.AWS_ARN }}
                role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
                aws-region: ${{ env.AWS_REGION }}
            
            - name: STS GetCallerIdentity
              run: |
                aws sts get-caller-identity
            
            - name: Login to AWS ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Load AWS secrets into env file
              run: aws secretsmanager get-secret-value --secret-id cai --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > .env
            
            - name: Build, tag, and push Go image to Amazon ECR
              env: 
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-go -t latest-go -f Dockerfile_go .
                docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
            
            - name: Build, tag, and push Python image to Amazon ECR
              env: 
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-py -t latest-py -f Dockerfile_python .
                docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
            
            - name: Deploy image to AWS EKS
              run: |
                kubectl apply -f eks/aws-auth.yml
                kubeclt apply -f eks/deployment.yml
                kubectl apply -f eks/service.yml
                kubeclt apply -f eks/issuer.yml
                kubeclt apply -f eks/ingress.yml